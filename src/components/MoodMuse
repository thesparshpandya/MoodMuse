import React, { useState, useEffect, useMemo } from 'react';
import { Brain, Sparkles, TrendingUp, MessageCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { ChatInterface } from './ChatInterface';
import { MoodAnalysis } from './MoodAnalysis';
import { ApiKeySetup } from './ApiKeySetup';
import { EmotionalInsights } from './EmotionalInsights';
import { StreakTracker } from './StreakTracker';

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  detectedMood?: string;
  intensity?: number;
}

const GEMINI_MODEL = 'gemini-1.5-flash';

export const MoodMuse: React.FC = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [apiKey, setApiKey] = useState<string>('');
  const { toast } = useToast();

  // Check if user has journaled today for streak tracking
  const hasEntryToday = useMemo(() => {
    const today = new Date().toDateString();
    const userMessages = messages.filter(m => m.role === 'user');
    return userMessages.some(m => m.timestamp.toDateString() === today);
  }, [messages]);

  useEffect(() => {
    // Load API key from localStorage
    const savedApiKey = localStorage.getItem('gemini_api_key');
    if (savedApiKey) {
      setApiKey(savedApiKey);
    }

    // Load previous messages
    const savedMessages = localStorage.getItem('moodmuse_messages');
    if (savedMessages) {
      try {
        const parsed = JSON.parse(savedMessages);
        setMessages(parsed.map((m: any) => ({
          ...m,
          timestamp: new Date(m.timestamp)
        })));
      } catch (error) {
        console.error('Error loading messages:', error);
      }
    }
  }, []);

  const validateApiKey = async (key: string): Promise<boolean> => {
    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=${key}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{ parts: [{ text: "Hello" }] }]
        }),
      });
      
      console.log('API key validation response:', response.status);
      return response.ok;
    } catch (error) {
      console.error('API key validation error:', error);
      return false;
    }
  };

  const saveApiKey = async (key: string) => {
    const isValid = await validateApiKey(key);
    
    if (!isValid) {
      toast({
        title: "Invalid API Key",
        description: "Please check your Google Gemini API key and try again.",
        variant: "destructive",
      });
      return;
    }

    localStorage.setItem('gemini_api_key', key);
    setApiKey(key);
    toast({
      title: "API Key Saved",
      description: "Your Google Gemini API key has been validated and saved.",
    });
  };

  const saveMessages = (newMessages: ChatMessage[]) => {
    setMessages(newMessages);
    localStorage.setItem('moodmuse_messages', JSON.stringify(newMessages));
  };

  const generateResponse = async (conversation: any[]): Promise<string> => {
    console.log(`Using Gemini model: ${GEMINI_MODEL}`);
    
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: conversation.map(msg => ({
          role: msg.role === 'assistant' ? 'model' : 'user',
          parts: [{ text: msg.content }]
        })),
        generationConfig: {
          temperature: 0.7,
          topP: 0.9,
          maxOutputTokens: 1024,
        }
      }),
    });

    console.log(`Gemini response status:`, response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Gemini error:`, errorText);
      throw new Error(`${response.status}: ${errorText}`);
    }

    const data = await response.json();
    console.log(`Gemini response:`, data);
    
    return data.candidates?.[0]?.content?.parts?.[0]?.text || "I'm here for you. Thank you for sharing with me.";
  };

  const sendMessage = async (content: string) => {
    if (!apiKey) {
      toast({
        title: "API Key Required",
        description: "Please set your Google Gemini API key first.",
        variant: "destructive",
      });
      return;
    }

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content,
      timestamp: new Date(),
    };

    const updatedMessages = [...messages, userMessage];
    saveMessages(updatedMessages);
    setIsLoading(true);

    try {
      // Prepare conversation history for Gemini (exclude system message as Gemini handles it differently)
      const conversation = [
        {
          role: "user",
          content: "You are an emotionally aware journal companion. Every time I write something, respond with 2–6 sentences of thoughtful reflection. Your tone should feel like a wise, emotionally intelligent friend — warm, supportive, but never overly sugar-coated. Offer gentle insights, ask a grounding question if needed, and always respect the emotion I'm feeling. Avoid long paragraphs. Avoid generic clichés. Be compassionate, real, and human. Think like a blend of a therapist and a brutally honest best friend. Start with a short one-line affirmation or a feeling tag (e.g., 'You're feeling a bit off today. That's okay.') Then, follow with a grounded and caring response. Use markdown formatting like **bold**, _italic_, and > blockquotes to emphasize key insights and make your responses more engaging and readable."
        },
        ...updatedMessages.slice(-10).map(msg => ({
          role: msg.role,
          content: msg.content
        }))
      ];

      const aiResponse = await generateResponse(conversation);

      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: aiResponse,
        timestamp: new Date(),
      };

      const finalMessages = [...updatedMessages, assistantMessage];
      saveMessages(finalMessages);

      toast({
        title: "Response Generated",
        description: `Generated using ${GEMINI_MODEL}.`,
      });

    } catch (error) {
      console.error('Error generating response:', error);
      toast({
        title: "Error",
        description: "Failed to generate response. Please check your API key or try again later.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Generate emotional insights
  const generateEmotionalInsight = async (recentMessages: ChatMessage[]): Promise<string> => {
    const conversation = [
      {
        role: "user",
        content: "You are an emotional insights generator. Based on the user's recent journal entries, provide a 2-3 sentence reflection about their emotional patterns, growth, or recurring themes. Be specific, empathetic, and insightful. Focus on patterns like mood triggers, coping strategies, or emotional growth. Avoid generic advice. Start observations with phrases like 'I've noticed...' or 'Your recent entries show...' Make it feel personal and meaningful."
      },
      {
        role: "user", 
        content: `Recent journal entries: ${recentMessages.map(m => m.content).join(' | ')}`
      }
    ];

    return await generateResponse(conversation);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-secondary/20 to-accent/30">
      {/* Header */}
      <div className="bg-gradient-purple shadow-purple">
        <div className="max-w-6xl mx-auto px-6 py-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-primary-foreground/20 rounded-2xl backdrop-blur-sm">
                <Brain className="h-8 w-8 text-primary-foreground" />
              </div>
              <div>
                <h1 className="text-4xl font-bold text-primary-foreground">MoodMuse</h1>
                <p className="text-primary-foreground/90 text-lg">Your Emotional AI Companion</p>
              </div>
            </div>
            <div className="hidden md:flex items-center gap-6 text-primary-foreground/80">
              <div className="flex items-center gap-2">
                <Sparkles className="h-5 w-5" />
                <span>Mood Detection</span>
              </div>
              <div className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5" />
                <span>Emotional Insights</span>
              </div>
              <div className="flex items-center gap-2">
                <MessageCircle className="h-5 w-5" />
                <span>Empathetic AI</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-6 py-8">
        {/* API Key Setup */}
        <div className="mb-8">
          <ApiKeySetup onApiKeySet={saveApiKey} hasApiKey={!!apiKey} />
        </div>

        <div className="grid gap-8 lg:grid-cols-3">
          {/* Chat Interface */}
          <div className="lg:col-span-2">
            <ChatInterface
              messages={messages}
              onSendMessage={sendMessage}
              isLoading={isLoading}
            />
          </div>

          {/* Enhanced Sidebar */}
          <div className="space-y-6">
            {/* Streak Tracker */}
            <StreakTracker hasEntryToday={hasEntryToday} />
            
            {/* Emotional Insights */}
            <EmotionalInsights 
              messages={messages} 
              onGenerateInsight={generateEmotionalInsight}
            />
            
            {/* Mood Analysis */}
            <MoodAnalysis messages={messages} />
            
            {/* Model Status */}
            {apiKey && (
              <div className="p-4 bg-card border border-border rounded-xl">
                <h4 className="font-medium text-sm text-foreground mb-2">Active Model</h4>
                <p className="text-xs text-muted-foreground">{GEMINI_MODEL}</p>
                <div className="mt-2 text-xs text-muted-foreground">
                  <span className="inline-block w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                  Ready for emotional support
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
