import React, { useMemo, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ChevronLeft, ChevronRight, Calendar } from 'lucide-react';
import { detectMood, getMoodEmoji, getMoodColor, groupMessagesByDate } from '@/lib/mood-utils';

interface ChatMessage {
  content: string;
  timestamp: Date;
  role: string;
}

interface MoodCalendarProps {
  messages: ChatMessage[];
}

export const MoodCalendar: React.FC<MoodCalendarProps> = ({ messages }) => {
  const [currentDate, setCurrentDate] = useState(new Date());

  const calendarData = useMemo(() => {
    const userMessages = messages.filter(m => m.role === 'user');
    const dailyMoods = groupMessagesByDate(userMessages);
    
    return dailyMoods;
  }, [messages]);

  const getDaysInMonth = (date: Date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();

    const days = [];
    
    // Add empty cells for days before the first day of the month
    for (let i = 0; i < startingDayOfWeek; i++) {
      days.push(null);
    }
    
    // Add all days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(day);
    }
    
    return days;
  };

  const navigateMonth = (direction: 'prev' | 'next') => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate);
      if (direction === 'prev') {
        newDate.setMonth(newDate.getMonth() - 1);
      } else {
        newDate.setMonth(newDate.getMonth() + 1);
      }
      return newDate;
    });
  };

  const getDayData = (day: number) => {
    const dateKey = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      day
    ).toDateString();
    
    const data = calendarData[dateKey];
    if (!data) return null;
    
    // Calculate additional properties from the grouped data
    const moodCounts: Record<string, number> = {};
    data.moods.forEach(mood => {
      moodCounts[mood] = (moodCounts[mood] || 0) + 1;
    });
    
    const dominantMood = Object.entries(moodCounts).reduce((a, b) => 
      moodCounts[a[0]] > moodCounts[b[0]] ? a : b
    )[0];
    
    const avgIntensity = data.intensities.reduce((sum, val) => sum + val, 0) / data.intensities.length;
    const entryCount = data.moods.length;
    
    return {
      dominantMood,
      avgIntensity,
      entryCount,
      moods: data.moods,
      intensities: data.intensities
    };
  };

  const getMoodIntensityColor = (intensity: number) => {
    if (intensity < 0.3) return 'bg-green-100 dark:bg-green-900/20';
    if (intensity < 0.6) return 'bg-yellow-100 dark:bg-yellow-900/20';
    return 'bg-red-100 dark:bg-red-900/20';
  };

  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  const days = getDaysInMonth(currentDate);
  const today = new Date().toDateString();

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            Mood Calendar
          </CardTitle>
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => navigateMonth('prev')}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <span className="text-sm font-medium min-w-[120px] text-center">
              {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => navigateMonth('next')}
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-7 gap-1 mb-4">
          {dayNames.map(day => (
            <div key={day} className="text-center text-sm font-medium text-muted-foreground p-2">
              {day}
            </div>
          ))}
        </div>
        
        <div className="grid grid-cols-7 gap-1">
          {days.map((day, index) => {
            if (day === null) {
              return <div key={index} className="h-12" />;
            }

            const dayData = getDayData(day);
            const dateKey = new Date(
              currentDate.getFullYear(),
              currentDate.getMonth(),
              day
            ).toDateString();
            const isToday = dateKey === today;

            return (
              <div
                key={day}
                className={`
                  h-12 border rounded-md flex flex-col items-center justify-center relative
                  hover:bg-muted/50 transition-colors cursor-pointer
                  ${isToday ? 'ring-2 ring-primary' : ''}
                  ${dayData ? getMoodIntensityColor(dayData.avgIntensity) : ''}
                `}
                title={dayData ? 
                  `${dayData.entryCount} entries, dominant mood: ${dayData.dominantMood} (${(dayData.avgIntensity * 100).toFixed(0)}% intensity)` : 
                  'No entries'
                }
              >
                <span className={`text-xs ${isToday ? 'font-bold' : ''}`}>
                  {day}
                </span>
                {dayData && (
                  <span className="absolute bottom-0 text-xs">
                    {getMoodEmoji(dayData.dominantMood)}
                  </span>
                )}
                {dayData && dayData.entryCount > 1 && (
                  <Badge 
                    variant="secondary" 
                    className="absolute -top-1 -right-1 h-4 w-4 p-0 text-xs flex items-center justify-center"
                  >
                    {dayData.entryCount}
                  </Badge>
                )}
              </div>
            );
          })}
        </div>

        <div className="mt-4 space-y-2">
          <h4 className="text-sm font-medium">Legend</h4>
          <div className="flex flex-wrap gap-2 text-xs">
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 bg-green-100 dark:bg-green-900/20 rounded"></div>
              <span>Low intensity</span>
            </div>
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 bg-yellow-100 dark:bg-yellow-900/20 rounded"></div>
              <span>Medium intensity</span>
            </div>
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 bg-red-100 dark:bg-red-900/20 rounded"></div>
              <span>High intensity</span>
            </div>
          </div>
          <p className="text-xs text-muted-foreground">
            Emoji shows dominant mood, color shows emotional intensity, number badge shows multiple entries
          </p>
        </div>
      </CardContent>
    </Card>
  );
};
