import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { ActivityType } from '@/types/activity';
import { Play, Pause, RotateCcw, Clock } from 'lucide-react';

interface ActivityTimerProps {
  activity: ActivityType;
  duration: number;
  onComplete: () => void;
}

export const ActivityTimer: React.FC<ActivityTimerProps> = ({ activity, duration, onComplete }) => {
  const [isActive, setIsActive] = useState(false);
  const [timeElapsed, setTimeElapsed] = useState(0);

  const targetTime = duration * 60; // Convert to seconds
  const progress = (timeElapsed / targetTime) * 100;

  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;

    if (isActive) {
      interval = setInterval(() => {
        setTimeElapsed(time => {
          const newTime = time + 1;
          if (newTime >= targetTime) {
            setIsActive(false);
            onComplete();
            return targetTime;
          }
          return newTime;
        });
      }, 1000);
    }

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isActive, targetTime, onComplete]);

  const handleStart = () => setIsActive(true);
  const handlePause = () => setIsActive(false);
  const handleReset = () => {
    setIsActive(false);
    setTimeElapsed(0);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <div className="text-3xl mb-2">{activity.icon}</div>
        <h3 className="text-2xl font-semibold">{activity.title}</h3>
        <p className="text-muted-foreground">{activity.description}</p>
      </div>

      {/* Timer Display */}
      <Card>
        <CardContent className="pt-8 pb-8">
          <div className="text-center space-y-4">
            <Clock className="h-12 w-12 text-primary mx-auto" />
            
            <div className="space-y-2">
              <div className="text-4xl font-bold">
                {formatTime(targetTime - timeElapsed)}
              </div>
              <div className="text-sm text-muted-foreground">
                remaining of {duration} minute{duration !== 1 ? 's' : ''}
              </div>
            </div>

            {/* Progress */}
            <div className="space-y-2">
              <Progress value={progress} className="h-3" />
              <div className="text-xs text-muted-foreground">
                {formatTime(timeElapsed)} elapsed
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Instructions */}
      {activity.instructions && activity.instructions.length > 0 && (
        <Card className="bg-muted/30">
          <CardContent className="pt-6">
            <div className="space-y-2">
              <h4 className="font-medium">Instructions</h4>
              <ol className="text-sm text-muted-foreground space-y-1">
                {activity.instructions.map((instruction, index) => (
                  <li key={index}>{index + 1}. {instruction}</li>
                ))}
              </ol>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Tips */}
      {activity.tips && activity.tips.length > 0 && (
        <Card className="bg-muted/30">
          <CardContent className="pt-6">
            <div className="space-y-2">
              <h4 className="font-medium">Tips for Success</h4>
              <ul className="text-sm text-muted-foreground space-y-1">
                {activity.tips.map((tip, index) => (
                  <li key={index}>• {tip}</li>
                ))}
              </ul>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Controls */}
      <div className="flex justify-center gap-3">
        {!isActive ? (
          <Button onClick={handleStart} className="glass-button">
            <Play className="h-4 w-4 mr-2" />
            {timeElapsed > 0 ? 'Resume' : 'Start'}
          </Button>
        ) : (
          <Button onClick={handlePause} variant="outline">
            <Pause className="h-4 w-4 mr-2" />
            Pause
          </Button>
        )}
        
        <Button onClick={handleReset} variant="outline">
          <RotateCcw className="h-4 w-4 mr-2" />
          Reset
        </Button>

        {/* Skip option for completion */}
        {timeElapsed > 30 && (
          <Button onClick={onComplete} variant="ghost" className="text-xs">
            Complete Early
          </Button>
        )}
      </div>

      {/* Benefits */}
      {activity.benefits && activity.benefits.length > 0 && (
        <Card className="bg-muted/30">
          <CardContent className="pt-6">
            <div className="space-y-2">
              <h4 className="font-medium">Benefits</h4>
              <ul className="text-sm text-muted-foreground space-y-1">
                {activity.benefits.map((benefit, index) => (
                  <li key={index}>• {benefit}</li>
                ))}
              </ul>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};
